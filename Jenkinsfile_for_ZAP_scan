pipeline {
    agent any
    options {
        skipDefaultCheckout(true)
    }
    stages {
        stage('Code checkout from GitHub') {
            steps {
                script {
                    cleanWs()
                    git credentialsId: '236c5fa7-2164-4a22-bdeb-3abd1be1d7ed', \
                    url: 'https://github.com/SilesiaEagle/abcd-student', \
                    branch: 'main'
                }
            }
        }

        stage('Juice-Shop') {
            steps {
                sh '''
                container_name="juice-shop"
                echo "container_name = $container_name"

                # Sprawdź, czy kontener już istnieje
                if [ "$(docker ps -a -q -f name=$container_name)" ]; then
                    echo "Kontener $container_name istnieje."

                    # Sprawdź, czy kontener jest w statusie "running"
                    if [ "$(docker inspect -f '{{.State.Status}}' $container_name)" = "running" ]; then
                        echo "Kontener $container_name już działa."
                    else
                        echo "Kontener $container_name istnieje, ale nie jest uruchomiony. Uruchamiam..."
                        docker start $container_name
                    fi
                else
                    echo "Kontener $container_name nie istnieje. Tworzę nowy kontener..."
                    docker run --name $container_name -d --rm -p 3000:3000 bkimminich/juice-shop
                fi

                # Pętla czekająca na status "running"
                while [ "$(docker inspect -f '{{.State.Status}}' $container_name)" != "running" ]; do
                    echo "Czekam, aż kontener $container_name będzie w trybie 'running'..."
                    sleep 1
                done

                echo "Kontener $container_name działa!"
                '''
            }
        }

        stage('DAST') {
            steps {
                sh '''
                container_name="zap"
                echo "container_name = $container_name"
                volume_path="/mnt/c/Users/kosmi/_devsecops/abcd-student/.zap"
                timestamp=$(date +"%Y-%m-%d_%H-%M-%S")

                # Sprawdź, czy kontener już istnieje
                if [ "$(docker ps -a -q -f name=$container_name)" ]; then
                    echo "Kontener $container_name już istnieje. Usuwam go..."
                    docker rm -f $container_name
                fi

                # Tworzenie nowego kontenera i uruchomienie skanowania
                echo "Tworzę nowy kontener $container_name i uruchamiam skanowanie..."
                docker run --name $container_name \
                    -v $volume_path:/zap/wrk/:rw \
                    -t ghcr.io/zaproxy/zaproxy:stable \
                    -d
                #    bash -c "zap.sh -cmd -addonupdate && \
                #            zap.sh -cmd -addoninstall communityScripts && \
                #            zap.sh -cmd -addoninstall pscanrulesAlpha && \
                #            zap.sh -cmd -addoninstall pscanrulesBeta && \
                #            zap.sh -cmd -autorun /zap/wrk/passive.yaml || true "
                echo "Skanowanie zakończone. Wyniki zapisane w katalogu: $volume_path"
                '''
            }

            post {
                always {
                    sh '''
                        cd ${WORKSPACE}
                        pwd
                        mkdir results
                        ls -l
                        cd results
                        docker cp zap:/zap/wrk/reports/zap_html_report.html ${WORKSPACE}/results/zap_html_report.html
                        docker cp zap:/zap/wrk/reports/zap_xml_report.xml ${WORKSPACE}/results/zap_xml_report.xml
                        ls -l
                        #docker stop zap juice-shop
                        #docker rm zap
                    '''

                    archiveArtifacts artifacts: 'results/**/*', fingerprint: true; allowEmptyArchive: true

                    defectDojoPublisher(
                        artifact: '${WORKSPACE}/results/zap_xml_report.xml',
                        productName: 'Juice Shop',
                        scanType: 'ZAP scan',
                        engagementName: 'kosmider.maciej@gmail.com'
                    )
                }
            }
        }
    }
}